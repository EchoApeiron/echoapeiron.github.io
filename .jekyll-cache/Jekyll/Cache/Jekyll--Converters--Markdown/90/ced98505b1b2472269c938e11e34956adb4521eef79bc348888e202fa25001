I"	
<p>In my last entry I talked about the initial server setup for my Jellyfin server. Some of the basic things I do whenever setting up a Linux host then getting the application installed. If you haven’t read that and need to please see the link below:</p>

<p><a href="/Jellyfin-Initial">Jellyfin, Setting up the Server</a></p>

<p>Where we left off you were at the point where you were configuring the application. Jellyfin runs off port 8096 by default for it’s base traffic. We will need this port as I haven’t gotten the app to use the reverse proxy we are going to build. But for web browser we will be accessing the site via port 80 and port 443.</p>

<h3 id="why-am-i-mentioning-these-ports">Why am I mentioning these ports?</h3>

<p>Because the beautiful thing about Jellyfin is that it can do remote access out of the box without a license (suck it Plex and Emby). We just need to do some port forwarding on our router to allow us to access our site through the public IP that our ISP provides us.</p>

<p>There are a myraid of ways to do this depending on the router or service provider you have. So below are just some articles discussing NAT, PAT, and Port Forwarding techniques (this is alot but should encompass all the things that are going on here).</p>

<blockquote>
  <p><a href="https://www.cisco.com/c/en/us/support/docs/ip/network-address-translation-nat/26704-nat-faq-00.html">Network Address Translation FAQ - Cisco</a></p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream backends {
    server 192.168.0.245:8096;
}
</code></pre></div></div>

<h2 id="tldr-nginx-config-p">TLDR; nginx Config :P</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
    listen 80;
    server_name &lt;server_url&gt;; 
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;  
    server_name &lt;server_url&gt;;
    allow all; 

    ssl_certificate /etc/nginx/ssl/home/server.pem;
    ssl_certificate_key /etc/nginx/ssl/home/server.key;
    ssl_trusted_certificate /etc/nginx/ssl/home/chain.pem;

    location / {
        proxy_pass http://backends;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
}
</code></pre></div></div>
:ET