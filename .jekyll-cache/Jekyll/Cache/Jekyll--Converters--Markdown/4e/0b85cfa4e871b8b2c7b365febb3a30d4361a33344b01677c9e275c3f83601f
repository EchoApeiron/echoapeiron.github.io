I"Š<p>In my last entry I talked about the initial server setup for my Jellyfin server. Some of the basic things I do whenever setting up a Linux host then getting the application installed. If you havenâ€™t read that and need to please see the link below:</p>

<p><a href="/Jellyfin-Initial">Jellyfin, Setting up the Server</a></p>

<p>Where we left off you were at the point where you were configuring the application. Jellyfin runs off port 8096 by default for itâ€™s base traffic. We will need this port as I havenâ€™t gotten the app to use the reverse proxy we are going to build. But for web browser we will be accessing the site via port 80 and port 443.</p>

<h3 id="why-am-i-mentioning-these-ports">Why am I mentioning these ports?</h3>

<p>Because the beautiful thing about Jellyfin is that it can do remote access out of the box without a license (suck it Plex and Emby). We just need to do some port forwarding on our router to allow us to access our site through the public IP that our ISP provides us.</p>

<p>There are a myraid of ways to do this depending on the router or service provider you have. So below are just some articles discussing NAT, PAT, and Port Forwarding techniques (this is alot but should encompass all the things that are going on here).</p>

<blockquote>
  <ul>
    <li><a href="https://www.cisco.com/c/en/us/support/docs/ip/network-address-translation-nat/26704-nat-faq-00.html">Network Address Translation FAQ - Cisco</a></li>
    <li><a href="https://www.geeksforgeeks.org/difference-between-network-address-translation-nat-and-port-address-translation-pat/">Difference Between NAT and PAT - GeeksforGeeks</a></li>
    <li><a href="https://portforward.com/">How to Forward a Port</a></li>
  </ul>
</blockquote>

<p>As well you might need some help finding your Public IP address that your ISP provided you. You can Google â€˜what is my IPâ€™ or use the link below:</p>

<blockquote>
  <p><a href="https://whatismyipaddress.com/">What is My IP Address</a></p>
</blockquote>

<p>Finally this step I will talk more about as this is the process I used. But you may find you want to lease a domain. I highly suggest doing this as we will need to purchase an SSL certificate to complete this project. No SSL service can run on Linux without a valid certificate. Itâ€™s just the way it is.</p>

<p>I suggest using Namecheap as the name implies, they have some pretty good rates for their services. Their customer service can be less than desired. All and all it isnâ€™t the worst company for the price. There article below details how you can request a domain from them:</p>

<blockquote>
  <p><a href="https://www.namecheap.com/blog/how-to-buy-a-domain-name-dp/">How to Buy a Domain Name - NameCheap</a></p>
</blockquote>

<p>For now you can just setup the initial domain. Even add a DNS host entry for your media server now as you will need this for the Certificate Signing Request or CSR we are about to submit. I made mine <code class="language-plaintext highlighter-rouge">home.domain.com</code>, but here are some examples and combinations you could use:</p>

<blockquote>
  <ul>
    <li>jellyfin.domain.com</li>
    <li>jellyfin.domain.xyz</li>
    <li>jellyfin.domain.net</li>
    <li>media.domain.com</li>
    <li>stream.domain.com</li>
  </ul>
</blockquote>

<p>As you can see that we can use pretty much anything for a subdomain but depending on the Top Level Domain or TLD will depend on our price. Just ensure you nab a domain and add a DNS pointing something to the public IP address you received before.</p>

<p><strong><em>And now</em></strong> with those prep steps out of the way we can start doing a little server stuff. The first thing we need to do is generate the CSR I was mentioning before. This is going to do two things:</p>

<ol>
  <li>Firstly itâ€™s going to create the Certificate Signing Request which we need to provied to the Certificate Authority or we canâ€™t get our cert.</li>
  <li>Itâ€™s going to create our certificateâ€™s private key. <strong>THIS IS SUPER IMPORTANT DONâ€™T LOSE THIS OR GIVE IT OUT OR YOU MUST REQUEST A NEW CERTIFICATE</strong></li>
</ol>

<p>In order to do this we are going to use OpenSSL issues the following command:</p>

<p><code class="language-plaintext highlighter-rouge">openssl req -newkey rsa:2048 -keyout PRIVATEKEY.key -out MYCSR.csr</code></p>

<p>You can name your PRIVATEKEY.key anything, but keep the extension .key. As for the CSR you really only need to copy the contents of this. You can use these contents to request your certificate through NameCheap. Once you have bought one you can use their article for instructions how to activate it with the CSR we just generated:</p>

<p>[How Do I Activate an SSL Certificate - NameCheap] (https://www.namecheap.com/support/knowledgebase/article.aspx/794/67/how-do-i-activate-an-ssl-certificate)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream backends {
    server 192.168.0.245:8096;
}

server {
    listen 80;
    server_name &lt;server_url&gt;; 
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;  
    server_name &lt;server_url&gt;;
    allow all; 

    ssl_certificate /etc/nginx/ssl/home/server.pem;
    ssl_certificate_key /etc/nginx/ssl/home/server.key;
    ssl_trusted_certificate /etc/nginx/ssl/home/chain.pem;

    location / {
        proxy_pass http://backends;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
}
</code></pre></div></div>
:ET